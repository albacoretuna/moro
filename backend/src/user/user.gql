input UserInput {
  email: String!
    @stringLength(min: 0, max: 200)
    @pattern(
      regexp: "^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$"
      flags: "i"
    )
  name: String @stringLength(min: 0, max: 200)
  password: String @stringLength(min: 8, max: 300)
}

input CredentialsInput {
  email: String!
    @stringLength(min: 0, max: 200)
    @pattern(
      regexp: "^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$"
      flags: "i"
    )
  password: String @stringLength(min: 8, max: 300)
}

input EmailInput {
  email: String!
    @stringLength(min: 0, max: 200)
    @pattern(
      regexp: "^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$"
      flags: "i"
    )
}

input NewPasswordInput {
  password: String! @stringLength(min: 8, max: 300)
  token: String! @stringLength(min: 0, max: 50)
}

enum AuthServices {
  GOOGLE
}

input SocialLoginInput {
  service: AuthServices!
  token: String! @stringLength(min: 0, max: 2000)
}

input CredentialsInput {
  email: String!
  name: String
  password: String
}

type User {
  id: Int
  email: String
  name: String
}

type AuthResult {
  success: boolean
  token: String
  message: String
}

type Query {
  user: User @auth
  users: [User] @hasPermissions(permissions: ["users.read"])
}

type Mutation {
  createUser(user: UserInput!): User
  register(user: UserInput!): AuthResult
  login(credentials: CredentialsInput!): AuthResult
}
